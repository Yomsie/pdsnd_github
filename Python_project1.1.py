{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d59ce70",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello! Let's explore some US bikeshare data!\n",
      "please select city you wish to explore\n",
      "\n",
      "new york city, chicago, washington\n",
      "New York city\n",
      "\n",
      "Thanks! you've  selected new york city\n",
      "\n",
      "please input month (only January to June) you will like to explore: type \"all\" for no filter\n",
      "january\n",
      "\n",
      "Thanks! you've  selected: january\n",
      "\n",
      "please input name of day you will like to explore: type \"all\" for no filter\n",
      "all\n",
      "\n",
      "Thanks! you've selected: all\n",
      "----------------------------------------\n",
      "     User_ID          Start Time             End Time  Trip Duration  \\\n",
      "15    187466 2017-01-11 11:30:30  2017-01-11 11:35:15          285.0   \n",
      "19      5857 2017-01-01 13:32:39  2017-01-01 13:49:57         1038.0   \n",
      "37    642530 2017-01-28 16:32:30  2017-01-28 16:53:55         1284.0   \n",
      "50    574675 2017-01-26 12:40:18  2017-01-26 13:06:33         1574.0   \n",
      "67     87348 2017-01-05 14:30:50  2017-01-05 14:42:30          700.0   \n",
      "71    338034 2017-01-17 06:43:11  2017-01-17 06:51:51          519.0   \n",
      "72    445709 2017-01-20 19:01:02  2017-01-20 19:06:32          330.0   \n",
      "100   389272 2017-01-19 07:34:42  2017-01-19 07:42:06          444.0   \n",
      "121   378557 2017-01-18 18:24:36  2017-01-18 18:46:42         1325.0   \n",
      "150    72902 2017-01-04 23:02:57  2017-01-04 23:05:12          135.0   \n",
      "\n",
      "                 Start Station                  End Station   User Type  \\\n",
      "15          E 17 St & Broadway              W 17 St & 8 Ave  Subscriber   \n",
      "19             W 22 St & 8 Ave              W 45 St & 6 Ave    Customer   \n",
      "37   Cathedral Pkwy & Broadway       Central Park S & 6 Ave  Subscriber   \n",
      "50             W 43 St & 6 Ave           Carmine St & 6 Ave  Subscriber   \n",
      "67          E 17 St & Broadway            Avenue D & E 3 St  Subscriber   \n",
      "71       Pershing Square South              E 25 St & 2 Ave  Subscriber   \n",
      "72    Stanton St & Chrystie St     MacDougal St & Prince St  Subscriber   \n",
      "100         Broadway & W 36 St              W 52 St & 6 Ave  Subscriber   \n",
      "121    Rivington St & Ridge St  Montrose Ave & Bushwick Ave  Subscriber   \n",
      "150            2 Ave & E 31 St              E 25 St & 2 Ave  Subscriber   \n",
      "\n",
      "     Gender  Birth Year           City   Months    Weekday  \n",
      "15     Male      1972.0  New York City  January    Tuesday  \n",
      "19        0         0.0  New York City  January   Saturday  \n",
      "37     Male      1974.0  New York City  January     Friday  \n",
      "50     Male      1954.0  New York City  January  Wednesday  \n",
      "67     Male      1986.0  New York City  January  Wednesday  \n",
      "71   Female      1990.0  New York City  January     Monday  \n",
      "72     Male      1983.0  New York City  January   Thursday  \n",
      "100    Male      1979.0  New York City  January  Wednesday  \n",
      "121  Female      1986.0  New York City  January    Tuesday  \n",
      "150    Male      1991.0  New York City  January    Tuesday  \n",
      "\n",
      "Calculating The Most Frequent Times of Travel...\n",
      "\n",
      "\n",
      "Most common month:January\n",
      "\n",
      "Most common weekday:Wednesday\n",
      "\n",
      "Most common start hour:8\n",
      "\n",
      "This took 0.008137941360473633 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating The Most Popular Stations and Trip...\n",
      "\n",
      "\n",
      "The Most Popular Start Station is\n",
      "Pershing Square North\n",
      "\n",
      "The Most Popular End Station is\n",
      "Pershing Square North\n",
      "\n",
      "The Most Popular Start/End Station is\n",
      "E 7 St & Avenue A to Cooper Square & E 7 St\n",
      "\n",
      "This took 0.022505998611450195 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating Trip Duration...\n",
      "\n",
      "Total travel time in hrs is 6591.743888888889\n",
      "Average travel time in hrs is 0.20675440339027942\n",
      "\n",
      "This took 0.0009112358093261719 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Calculating User Stats...\n",
      "\n",
      "Current user types are: User Type\n",
      "0               157\n",
      "Customer        985\n",
      "Subscriber    30740\n",
      "Name: User Type, dtype: int64\n",
      "Current genders are: Gender\n",
      "0          1375\n",
      "Female     6696\n",
      "Male      23811\n",
      "Name: Gender, dtype: int64\n",
      "Most recent Birth Year is: 2000\n",
      "Most common Birth Year is: 0\n",
      "The earliest Birth Year is: 0\n",
      "\n",
      "This took 0.012295246124267578 seconds.\n",
      "----------------------------------------\n",
      "\n",
      "Please note: All NaN data are converted to zero (0)!!\n",
      "==================================================\n",
      "\n",
      "Calculating User Stats...\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "Would you like to view a few rows of individual trip data? Enter yes or no\n",
      "yes\n",
      "    User_ID          Start Time             End Time  Trip Duration  \\\n",
      "15   187466 2017-01-11 11:30:30  2017-01-11 11:35:15          285.0   \n",
      "19     5857 2017-01-01 13:32:39  2017-01-01 13:49:57         1038.0   \n",
      "37   642530 2017-01-28 16:32:30  2017-01-28 16:53:55         1284.0   \n",
      "50   574675 2017-01-26 12:40:18  2017-01-26 13:06:33         1574.0   \n",
      "67    87348 2017-01-05 14:30:50  2017-01-05 14:42:30          700.0   \n",
      "\n",
      "                Start Station             End Station   User Type Gender  \\\n",
      "15         E 17 St & Broadway         W 17 St & 8 Ave  Subscriber   Male   \n",
      "19            W 22 St & 8 Ave         W 45 St & 6 Ave    Customer      0   \n",
      "37  Cathedral Pkwy & Broadway  Central Park S & 6 Ave  Subscriber   Male   \n",
      "50            W 43 St & 6 Ave      Carmine St & 6 Ave  Subscriber   Male   \n",
      "67         E 17 St & Broadway       Avenue D & E 3 St  Subscriber   Male   \n",
      "\n",
      "    Birth Year           City   Months    Weekday  Start_hr  \\\n",
      "15      1972.0  New York City  January    Tuesday        11   \n",
      "19         0.0  New York City  January   Saturday        13   \n",
      "37      1974.0  New York City  January     Friday        16   \n",
      "50      1954.0  New York City  January  Wednesday        12   \n",
      "67      1986.0  New York City  January  Wednesday        14   \n",
      "\n",
      "                                           Start_Stop  \n",
      "15              E 17 St & Broadway to W 17 St & 8 Ave  \n",
      "19                 W 22 St & 8 Ave to W 45 St & 6 Ave  \n",
      "37  Cathedral Pkwy & Broadway to Central Park S & ...  \n",
      "50              W 43 St & 6 Ave to Carmine St & 6 Ave  \n",
      "67            E 17 St & Broadway to Avenue D & E 3 St  \n",
      "Do you wish to continue?: no\n",
      "\n",
      "This took 142.51828789710999 seconds.\n",
      "----------------------------------------\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "CITY_DATA = { 'chicago': 'chicago.csv',\n",
    "              'new york city': 'new_york_city.csv',\n",
    "              'washington': 'washington.csv' }\n",
    "def get_filters():\n",
    "    \"\"\"\n",
    "    Asks user to specify a city, month, and day to analyze.\n",
    "\n",
    "    Returns:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    \"\"\"\n",
    "    print('Hello! Let\\'s explore some US bikeshare data!')\n",
    "    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs\n",
    "    #response = input('\\ndo you wish to start exploring? yes/no\\n').lower()\n",
    "    error_count=0\n",
    "    while True:\n",
    "        city=input('please select city you wish to explore\\n\\nnew york city, chicago, washington\\n').lower()\n",
    "        if city not in CITY_DATA:\n",
    "            print('\\ncity name not recognised, please try again')\n",
    "            error_count+=1\n",
    "            if error_count>2:\n",
    "                print('Invalid entry for city..error will occur')\n",
    "                break\n",
    "            else:\n",
    "                continue\n",
    "        else:\n",
    "            print('\\nThanks! you\\'ve  selected {}'.format(city))\n",
    "            #break \n",
    "\n",
    "    # TO DO: get user input for month (all, january, february, ... , june)\n",
    "        valid_months=['all','january','february','march','april','may','june']\n",
    "                      \n",
    "        month = input('\\nplease input month (only January to June) you will like to explore: type \"all\" for no filter\\n').lower()\n",
    "    \n",
    "        if month not in valid_months:\n",
    "            print('\\nmonth name not recognised, please try again...restarting')\n",
    "            continue\n",
    "        else:\n",
    "            print('\\nThanks! you\\'ve  selected: {}'.format(month))\n",
    "    \n",
    "    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)\n",
    "    \n",
    "        valid_days=['all','monday','tuesday','wednesday','thursday','friday','saturday','sunday']\n",
    "        day = input('\\nplease input name of day you will like to explore: type \"all\" for no filter\\n').lower()\n",
    "    \n",
    "        if day not in valid_days:\n",
    "            print('\\name of day not recognised, please try again...restarting')\n",
    "            continue\n",
    "        else:\n",
    "            print('\\nThanks! you\\'ve selected: {}'.format(day))\n",
    "            #break\n",
    "        print('-'*40)\n",
    "    \n",
    "        return city, month, day\n",
    "\n",
    "\n",
    "def load_data(city, month, day):\n",
    "    \"\"\"\n",
    "    Loads data for the specified city and filters by month and day if applicable.\n",
    "\n",
    "    Args:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    Returns:\n",
    "        df - Pandas DataFrame containing city data filtered by month and day\n",
    "    \"\"\"\n",
    "    week_days=list([\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"])\n",
    "\n",
    "    with open('new_york_city.csv') as f1:\n",
    "        ny=pd.read_csv(f1)\n",
    "    with open('washington.csv') as f2:\n",
    "        ws=pd.read_csv(f2)\n",
    "    with open('chicago.csv') as f3:\n",
    "        ch=pd.read_csv(f3)\n",
    "    file_data1=pd.DataFrame(ny)\n",
    "    file_data1['City']='New York City'\n",
    "    file_data2=pd.DataFrame(ws)\n",
    "    file_data2['Gender']=None\n",
    "    file_data2['Birth Year']=None\n",
    "    file_data2['City']='Washington'\n",
    "    file_data3=pd.DataFrame(ch)\n",
    "    file_data3['City']='Chicago'\n",
    "    file_data=file_data1\n",
    "    file_data=file_data.append(file_data2)\n",
    "    file_data=file_data.append(file_data3)\n",
    "    dfs = pd.DataFrame(file_data)\n",
    "    dfs=dfs.rename(columns = {'Unnamed: 0': 'User_ID'})\n",
    "    dfs['Start Time']=pd.to_datetime(dfs['Start Time'])\n",
    "    dfs['Months']=dfs['Start Time'].dt.month_name()\n",
    "    dfs['Weekday']=dfs['Start Time'].dt.weekday\n",
    "    for i in range(7):\n",
    "        dfs['Weekday']=dfs['Weekday'].replace(i,week_days[i])\n",
    "    df_filter1 = dfs[dfs.City.eq(city.title())]\n",
    "    # ignore filter when month selected is \"all\"\n",
    "    if month=='all':\n",
    "        df_filter2=df_filter1\n",
    "    else:\n",
    "        df_filter2 = df_filter1[df_filter1.Months.eq(month.title())]\n",
    "    # ignore filter when day selected is \"all\"\n",
    "    if day == 'all':        \n",
    "        df_filter3=df_filter2\n",
    "    else:\n",
    "        df_filter3 = df_filter2[df_filter2.Weekday.eq(day.title())]\n",
    "        \n",
    "    df = pd.DataFrame(df_filter3)\n",
    "    \n",
    "    #insert zeros for all NaN\n",
    "    df=df.fillna(0)\n",
    "    \n",
    "    #viewing DataFrame for debugging\n",
    "    print(df.head(10))\n",
    "\n",
    "    return df\n",
    "\n",
    "\n",
    "def time_stats(df):\n",
    "    \"\"\"Displays statistics on the most frequent times of travel.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Frequent Times of Travel...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display the most common month\n",
    "    month_mode=df['Months'].mode()[0]\n",
    "    print('\\nMost common month:{}'.format(month_mode))\n",
    "\n",
    "    # TO DO: display the most common day of week\n",
    "    week_mode=df['Weekday'].mode()[0]\n",
    "    print('\\nMost common weekday:{}'.format(week_mode))\n",
    "    \n",
    "    # TO DO: display the most common start hour\n",
    "    df['Start_hr']=df['Start Time'].dt.hour\n",
    "    strt_hr_mode=df['Start_hr'].mode()[0]\n",
    "    print('\\nMost common start hour:{}'.format(strt_hr_mode))\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def station_stats(df):\n",
    "    \"\"\"Displays statistics on the most popular stations and trip.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Popular Stations and Trip...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display most commonly used start station\n",
    "    strt_sttn_mode=df['Start Station'].mode()[0]\n",
    "    print('\\nThe Most Popular Start Station is\\n{}'.format(strt_sttn_mode))\n",
    "    \n",
    "    # TO DO: display most commonly used end station\n",
    "    end_sttn_mode=df['End Station'].mode()[0]\n",
    "    print('\\nThe Most Popular End Station is\\n{}'.format(end_sttn_mode))\n",
    "\n",
    "    # TO DO: display most frequent combination of start station and end station trip\n",
    "    df['Start_Stop']=df['Start Station']+\" to \"+df['End Station']\n",
    "    strt_stop_mode=df['Start_Stop'].mode()[0]\n",
    "    print('\\nThe Most Popular Start/End Station is\\n{}'.format(strt_stop_mode))\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "def trip_duration_stats(df):\n",
    "    \"\"\"Displays statistics on the total and average trip duration.\"\"\"\n",
    "\n",
    "    print('\\nCalculating Trip Duration...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "     # TO DO: display total travel time\n",
    "    ttl_trvl_time=df['Trip Duration'].sum()/3600\n",
    "    print('Total travel time in hrs is {}'.format(ttl_trvl_time))\n",
    "\n",
    "    # TO DO: display mean travel time\n",
    "    mean_trvl_time=df['Trip Duration'].mean()/3600\n",
    "    print('Average travel time in hrs is {}'.format(mean_trvl_time))\n",
    "\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def user_stats(df):\n",
    "    \"\"\"Displays statistics on bikeshare users.\"\"\"\n",
    "\n",
    "    print('\\nCalculating User Stats...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: Display counts of user types\n",
    "    cnt_user_typs=df.groupby(['User Type'])['User Type'].count()\n",
    "    print('Current user types are: {}'.format(cnt_user_typs))\n",
    "\n",
    "    # TO DO: Display counts of gender\n",
    "    gender_typs=df.groupby(['Gender'])['Gender'].count()\n",
    "    print('Current genders are: {}'.format(gender_typs))\n",
    "\n",
    "    # TO DO: Display earliest, most recent, and most common year of birth\n",
    "    most_recent_birth_yr=df['Birth Year'].max()\n",
    "    print('Most recent Birth Year is: {}'.format(int(most_recent_birth_yr)))\n",
    "\n",
    "    most_common_birth_yr=df['Birth Year'].mode()[0]\n",
    "    print('Most common Birth Year is: {}'.format(int(most_common_birth_yr)))\n",
    "\n",
    "    earliest_birth_yr=df['Birth Year'].min()\n",
    "    print('The earliest Birth Year is: {}'.format(int(earliest_birth_yr)))\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "    print('\\nPlease note: All NaN data are converted to zero (0)!!')\n",
    "    print('='*50)\n",
    "\n",
    "def view_lines(df):\n",
    "    \"\"\"Displays few lines in trip database on user request.\"\"\"\n",
    "\n",
    "    print('\\nCalculating User Stats...\\n')\n",
    "    start_time = time.time()\n",
    "    #TO DO: display few lines for user's satisfaction\n",
    "    \n",
    "    view_data = input('\\n\\n\\nWould you like to view a few rows of individual trip data? Enter yes or no\\n').lower()\n",
    "    start_loc = 5\n",
    "    while view_data == 'yes': #(?????):\n",
    "        print(df.iloc[:start_loc]) #(df.iloc[????:????]\n",
    "        start_loc += 5\n",
    "        view_data = input(\"Do you wish to continue?: \").lower()\n",
    "        if view_data != 'yes':\n",
    "            break\n",
    "        else:\n",
    "            continue\n",
    "            \n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "    \n",
    "def main():\n",
    "    while True:\n",
    "        city, month, day = get_filters()\n",
    "        df = load_data(city, month, day)\n",
    "        time_stats(df)\n",
    "        station_stats(df)\n",
    "        trip_duration_stats(df)\n",
    "        user_stats(df)\n",
    "        view_lines(df)\n",
    "\n",
    "        restart = input('\\nWould you like to restart? Enter yes or no.\\n')\n",
    "        if restart.lower() != 'yes':\n",
    "            print('\\nThanks for exploring our US bikeshare data!!!')\n",
    "            break      \n",
    "if __name__ == \"__main__\":\n",
    "\tmain()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f23cfed",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
